{
	"info": {
		"_postman_id": "87eda17f-af80-49d5-8740-412c68fab77d",
		"name": "Change Password Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38630752",
		"_collection_link": "https://warped-shuttle-586149.postman.co/workspace/TCSS460-Group-1~25d99b7c-ba1d-48c6-8df0-57753de15649/collection/38630752-87eda17f-af80-49d5-8740-412c68fab77d?action=share&source=collection_link&creator=38630752"
	},
	"item": [
		{
			"name": "ChangePW 400 Unauthorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response includes specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Token is not valid\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is Bad Request\", () => {\r",
							"    pm.response.to.have.status(403);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentpassword\" : \"{{currentPassword}}\",\r\n    \"newpassword\" : \"{{currentPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/changePassword",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"changePassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "ChangePW 400 Unauthorized 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response includes specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Auth token is not supplied\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is Bad Request\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentpassword\" : \"{{currentPassword}}\",\r\n    \"newpassword\" : \"{{currentPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/changePassword",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"changePassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response includes specified elements\", () => {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.ownProperty(\"accessToken\");",
							"});",
							"",
							"pm.test(\"Response is Successful\", () => {",
							"    pm.response.to.have.status(201);",
							"})",
							"",
							"pm.collectionVariables.set(\"LoginJWT\", pm.response.json().accessToken);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
							"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomUserName}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\":\"{{$randomFirstName}}\",\r\n    \"lastname\":\"{{$randomLastName}}\",\r\n    \"email\":\"{{email}}\",\r\n    \"password\":\"Password1!\",\r\n    \"username\":\"{{username}}\",\r\n    \"role\":\"1\",\r\n    \"phone\":\"{{$timestamp}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/register",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "ChangePW 400 noNew",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response includes specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Invalid or missing new password - please refer to documentation\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is Bad Request\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{LoginJWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentpassword\" : \"{{currentPassword}}\",\r\n    \"newpassword\" : \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/changePassword",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"changePassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "ChangePW 400 noOld",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response includes specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Missing current password - please refer to documentation\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is Bad Request\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{LoginJWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentpassword\" : \"\",\r\n    \"newpassword\" : \"{{newPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/changePassword",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"changePassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "ChangePW 400 InvalidPW",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response includes specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Invalid or missing new password - please refer to documentation\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is Bad Request\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{LoginJWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentpassword\" : \"{{currentPassword}}\",\r\n    \"newpassword\" : \"badPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/changePassword",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"changePassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "ChangePW 400 IncorrectPW",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response includes specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Incorrect password\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is Bad Request\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{LoginJWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentpassword\" : \"wrongPassword\",\r\n    \"newpassword\" : \"{{newPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/changePassword",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"changePassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "ChangePW 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.collectionVariables.set(\"currentPassword\", pm.variables.replaceIn('{{newPassword}}'));\r",
							"// pm.collectionVariables.set(\"newPassword\", pm.variables.replaceIn('{{placeholder}}'));\r",
							"\r",
							"\r",
							"pm.test(\"Response is Successful\", () => {\r",
							"    pm.response.to.have.status(204);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{LoginJWT}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"currentpassword\" : \"{{currentPassword}}\",\r\n    \"newpassword\" : \"{{newPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/changePassword",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"changePassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response includes specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"accessToken\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is Successful\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"{{email}}\",\r\n    \"password\" : \"{{newPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/login",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Fail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response includes specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Credentials did not match\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response does NOT include specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.not.have.ownProperty(\"accessToken\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is Bad Request\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"{{email}}\",\r\n    \"password\" : \"{{currentPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/login",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "inherit"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "LoginJWT",
			"value": "",
			"type": "string"
		},
		{
			"key": "currentPassword",
			"value": "Password1!",
			"type": "string"
		},
		{
			"key": "newPassword",
			"value": "Password2!",
			"type": "string"
		},
		{
			"key": "username",
			"value": "",
			"type": "string"
		},
		{
			"key": "email",
			"value": "",
			"type": "string"
		}
	]
}